Index: device/advantech/rsb4221/init.am335xevm.rc
===================================================================
--- device/advantech/rsb4221/init.am335xevm.rc	(revision 61)
+++ device/advantech/rsb4221/init.am335xevm.rc	(working copy)
@@ -150,6 +150,10 @@
     disabled
     oneshot
 
+service ota_agent  /cache/OTA-SUEClientDemo -i  172.21.84.138 -p 10003 -d ti-am335x-android 
+    class main
+    user root
+
 #shared transport user space mgr service for Bluetooth, FM and GPS
 service uim /system/bin/uim-sysfs
     class core
Index: external/servertest/.hwtestd.c.swo
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: external/servertest/.hwtestd.c.swo
===================================================================
--- external/servertest/.hwtestd.c.swo	(revision 0)
+++ external/servertest/.hwtestd.c.swo	(working copy)

Property changes on: external/servertest/.hwtestd.c.swo
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: external/servertest/Android.mk
===================================================================
--- external/servertest/Android.mk	(revision 0)
+++ external/servertest/Android.mk	(working copy)
@@ -0,0 +1,20 @@
+LOCAL_PATH := $(call my-dir)
+
+common_src_files := 
+
+
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := \
+    servertest.c
+
+LOCAL_SHARED_LIBRARIES := \
+    libcutils \
+    liblog \
+    libselinux
+
+LOCAL_MODULE := servertest
+
+LOCAL_MODULE_TAGS := optional
+
+include $(BUILD_EXECUTABLE)
Index: external/servertest/servertest.
===================================================================
Index: external/servertest/servertest.c
===================================================================
--- external/servertest/servertest.c	(revision 0)
+++ external/servertest/servertest.c	(working copy)
@@ -0,0 +1,145 @@
+/*
+** Copyright 2008, The Android Open Source Project
+** Copyright (C) 2013 Freescale Semiconductor, Inc.
+**
+** Licensed under the Apache License, Version 2.0 (the "License"); 
+** you may not use this file except in compliance with the License. 
+** You may obtain a copy of the License at 
+**
+**     http://www.apache.org/licenses/LICENSE-2.0 
+**
+** Unless required by applicable law or agreed to in writing, software 
+** distributed under the License is distributed on an "AS IS" BASIS, 
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+** See the License for the specific language governing permissions and 
+** limitations under the License.
+*/
+
+//#include <sys/capability.h>
+#include <linux/prctl.h>
+#include <cutils/properties.h>
+#include <pthread.h>
+#include "servertest.h"
+
+
+static int readx(int s, void *_buf, int count)
+{
+    char *buf = _buf;
+    int n = 0, r;
+    if (count < 0) return -1;
+    while (n < count) {
+        r = read(s, buf + n, count - n);
+        if (r < 0) {
+            if (errno == EINTR) continue;
+            ALOGE(LOG_TAG "read error: %s\n", strerror(errno));
+            return -1;
+        }
+        if (r == 0) {
+            ALOGE(LOG_TAG "eof\n");
+            return -1; /* EOF */
+        }
+        n += r;
+    }
+    return 0;
+}
+
+static int writex(int s, const void *_buf, int count)
+{
+    const char *buf = _buf;
+    int n = 0, r;
+    if (count < 0) return -1;
+    while (n < count) {
+        r = write(s, buf + n, count - n);
+        if (r < 0) {
+            if (errno == EINTR) continue;
+            ALOGE(LOG_TAG "write error: %s\n", strerror(errno));
+            return -1;
+        }
+        n += r;
+    }
+    return 0;
+}
+
+
+static __inline__ int  sock_write(int fd, void* buf, int len)
+{
+	int wlen;
+	wlen = write(fd, buf, len);
+	if(wlen != len){
+		ALOGE(LOG_TAG "Failed to write to test_server: %s\n", strerror(errno));
+		return -1;
+	}
+	return len;
+}
+
+void usage()
+{
+#define ALOGI printf
+	ALOGI(LOG_TAG "not support, usage: \n");
+        ALOGI(LOG_TAG "servertest [action string] [option]\n");
+        ALOGI(LOG_TAG "action string can be:\n");
+        ALOGI(LOG_TAG "    systembackup -- mean system backup\n");
+        ALOGI(LOG_TAG "    wipedata -- mean wipe data partition\n");
+        ALOGI(LOG_TAG "    wipecache -- mean wipe cache partition\n");
+        ALOGI(LOG_TAG "    install /cache/update.zip -- means update system and /cache/update.zip is the option\n");
+        ALOGI(LOG_TAG "    appinstall /cache/test.apk -- means install/reinstall app and /cache/test.apk is the option\n");
+}
+
+int main(const int argc, const char *argv[]) {
+    char buf[] = "systembackup";//for system backup
+    //char buf[] = "install /cache/update.zip";
+    //char buf[] = "wipecache";
+    //char buf[] = "wipecache";
+    int len = strlen(buf);
+    static int clientfd;
+
+    ALOGI(LOG_TAG "test recovery functions...\n");
+    if(argc <= 1 && argc > 3){
+        usage();
+	return -1;
+    }
+    else if(argc == 2){
+        if(strncmp(argv[1], "systembackup", strlen("systembackup")) && strncmp(argv[1], "wipedata", strlen("wipedata")) && strncmp(argv[1], "wipecache", strlen("wipecache"))){
+                usage();
+                return -1;
+        }
+    }
+    else if(argc == 3){
+        if(strncmp(argv[1], "install", strlen("install")) && strncmp(argv[1], "appinstall", strlen("appinstall"))){
+                usage();
+                return -1;
+        }
+    }
+    else{
+	usage();
+	return -1;
+    }
+
+    
+    clientfd = socket_local_client("ota_server", ANDROID_SOCKET_NAMESPACE_ABSTRACT,SOCK_STREAM);
+    if(clientfd < 0){
+	ALOGE(LOG_TAG "Failed to connect to local socket test_server: %s\n", strerror(errno));
+	exit(1);
+    }
+    ALOGI(LOG_TAG "test connect successful\n");
+    
+    sleep(1);	    
+    if(argc == 2){
+	writex(clientfd, argv[1], strlen(argv[1]));
+    }
+    else if(argc == 3){
+	char astr[1024] = {0};
+	int len1 = strlen(argv[1]);
+	int len2 = strlen(argv[2]);
+	int len3 = strlen("#");
+	strncpy(astr, argv[1], len1);
+	strncpy(astr+len1, "#", len3);
+	strncpy(astr+len1+len3, argv[2], len2);
+	writex(clientfd, astr, strlen(astr));	
+    }
+    else{
+    	usage();
+    	return -1;
+    }
+    return 0;
+}
Index: external/servertest/servertest.h
===================================================================
--- external/servertest/servertest.h	(revision 0)
+++ external/servertest/servertest.h	(working copy)
@@ -0,0 +1,48 @@
+/*
+**
+** Copyright 2008, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License"); 
+** you may not use this file except in compliance with the License. 
+** You may obtain a copy of the License at 
+**
+**     http://www.apache.org/licenses/LICENSE-2.0 
+**
+** Unless required by applicable law or agreed to in writing, software 
+** distributed under the License is distributed on an "AS IS" BASIS, 
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+** See the License for the specific language governing permissions and 
+** limitations under the License.
+*/
+
+#define LOG_TAG "AdvOtaClient "
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdint.h>
+#include <inttypes.h>
+#include <sys/stat.h>
+#include <dirent.h>
+#include <unistd.h>
+#include <ctype.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <utime.h>
+#include <sys/socket.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+
+#include <cutils/fs.h>
+#include <cutils/sockets.h>
+#include <cutils/log.h>
+#include <cutils/properties.h>
+#include <cutils/multiuser.h>
+
+#include <private/android_filesystem_config.h>
+
+#if INCLUDE_SYS_MOUNT_FOR_STATFS
+#include <sys/mount.h>
+#else
+#include <sys/statfs.h>
+#endif
+
Index: frameworks/base/Android.mk
===================================================================
--- frameworks/base/Android.mk	(revision 61)
+++ frameworks/base/Android.mk	(working copy)
@@ -145,6 +145,7 @@
 	core/java/android/os/IUpdateLock.aidl \
         core/java/android/os/IUserManager.aidl \
 	core/java/android/os/IVibratorService.aidl \
+	core/java/android/os/IAdvOtaService.aidl \
 	core/java/android/service/dreams/IDreamManager.aidl \
 	core/java/android/service/dreams/IDreamService.aidl \
 	core/java/android/service/wallpaper/IWallpaperConnection.aidl \
Index: frameworks/base/api/current.txt
===================================================================
--- frameworks/base/api/current.txt	(revision 61)
+++ frameworks/base/api/current.txt	(working copy)
@@ -16132,6 +16132,16 @@
     method public boolean quit();
   }
 
+  public abstract interface IAdvOtaService implements android.os.IInterface {
+  }
+
+  public static abstract class IAdvOtaService.Stub extends android.os.Binder implements android.os.IAdvOtaService {
+    ctor public IAdvOtaService.Stub();
+    method public android.os.IBinder asBinder();
+    method public static android.os.IAdvOtaService asInterface(android.os.IBinder);
+    method public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException;
+  }
+
   public abstract interface IBinder {
     method public abstract void dump(java.io.FileDescriptor, java.lang.String[]) throws android.os.RemoteException;
     method public abstract void dumpAsync(java.io.FileDescriptor, java.lang.String[]) throws android.os.RemoteException;
Index: frameworks/base/core/java/android/os/IAdvOtaService.aidl
===================================================================
--- frameworks/base/core/java/android/os/IAdvOtaService.aidl	(revision 0)
+++ frameworks/base/core/java/android/os/IAdvOtaService.aidl	(working copy)
@@ -0,0 +1,4 @@
+package android.os;
+interface IAdvOtaService{
+
+}
Index: frameworks/base/services/java/com/android/server/AdvOtaService.java
===================================================================
--- frameworks/base/services/java/com/android/server/AdvOtaService.java	(revision 0)
+++ frameworks/base/services/java/com/android/server/AdvOtaService.java	(working copy)
@@ -0,0 +1,304 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.os.RecoverySystem;
+import android.os.IAdvOtaService;
+import android.net.LocalSocket;
+import android.net.LocalServerSocket;
+import android.net.LocalSocketAddress;
+import android.util.Slog;
+import android.os.Handler;
+import android.os.SystemProperties;
+import android.os.UserHandle;
+import android.content.BroadcastReceiver;
+
+import java.io.IOException;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.net.ServerSocket;
+import java.net.Socket;
+
+import android.os.PowerManager;
+import android.os.PowerManager.WakeLock;
+
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothDevice;
+import android.bluetooth.BluetoothServerSocket;
+import android.bluetooth.BluetoothSocket;
+
+import org.apache.http.util.EncodingUtils;
+import android.app.Activity;
+import android.content.Intent;
+import android.view.WindowManager;
+import android.view.View;
+import android.os.SystemProperties;
+
+import static android.view.WindowManager.LayoutParams.FLAG_SYSTEM_ERROR;
+
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.res.Resources;
+import android.os.Handler;
+import android.os.Message;
+import android.view.WindowManager;
+import android.provider.Settings;
+import android.content.ContentResolver;
+import android.content.pm.PackageManager;
+import android.net.Uri;
+import android.os.RemoteException;
+import  android.os.PowerManager;
+import android.os.SystemClock;
+import java.util.ArrayList;
+import java.util.List;
+import android.content.pm.PackageInfo;
+import android.content.pm.ApplicationInfo;
+
+public final class AdvOtaService extends IAdvOtaService.Stub {
+    private static final String TAG = "AdvOtaService";
+    private static final String TEST_ACTION = "com.advantech.advfuntest.TEST_ACTION";
+    private static final boolean LOCAL_DEBUG = true;//jinxin
+    InputStream mIn;
+    OutputStream mOut;
+    LocalSocket mSocket;
+    Context mContext = null;
+    Thread serverThread = null;
+    private PackageManager mPackageManager;
+    //private ServerSocket serverSocket;
+    private LocalServerSocket serverSocket;
+    private static final int SERVERPORT = 6000;
+    byte buf[] = new byte[1024];
+    int buflen = 0;
+    //for test
+    private BroadcastReceiver testReceiver = new BroadcastReceiver(){
+          public void onReceive(Context context, Intent intent) {
+            String text = intent.getStringExtra("test-info");
+            Slog.i(TAG, "broadcast receive: "+text);
+          }
+    };
+
+    public enum Advaction {
+    systembackup,wipedata,wipecache,install,appinstall;
+
+    public static Advaction getAdvaction(String advaction){
+       return valueOf(advaction.toLowerCase());
+    	}
+    }
+
+    class AppInfo {  
+    	private int versionCode = 0;    
+    	//名称 
+    	private String appName = "";   
+    	//包 
+    	private String packageName = "";   
+    	private String versionName = "";  
+    } 
+
+    //service init
+    public AdvOtaService(Context context) {
+	mContext = context;
+	Slog.i(TAG, "AdvOtaService init...");
+	mPackageManager = mContext.getPackageManager();
+
+	final IntentFilter userFilter = new IntentFilter();
+        userFilter.addAction(TEST_ACTION);
+	mContext.registerReceiver(testReceiver, userFilter, null, null);
+
+	//startup main thread
+	this.serverThread = new Thread(new ServerThread());
+	this.serverThread.start();
+	
+    }
+
+    class ServerThread implements Runnable {
+	public void run() {
+		//Socket socket = null;
+	    	LocalSocket socket = null; 	
+		try {
+			serverSocket = new LocalServerSocket("ota_server");
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		while (!Thread.currentThread().isInterrupted()) {
+
+			try {
+				socket = serverSocket.accept();
+				/*
+				CommunicationThread commThread = new CommunicationThread(socket);
+				new Thread(commThread).start();
+				*/
+				if(socket != null){
+					Slog.e(TAG, "Accept one client");
+					startTestThread(socket);	
+				}
+				else{
+					Slog.i(TAG, "Failed accept a client");
+					return;
+				}
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+		}
+	}
+    }
+   
+    private void startTestThread(final LocalSocket socket){
+	Thread t = new Thread(){
+		@Override 
+		public void run(){
+			try{
+				InputStream is = socket.getInputStream();
+				InputStreamReader isr = new InputStreamReader(is);
+				while(true){//
+					char [] data = new char[128];
+					int readBytes = isr.read(data);
+					if(readBytes != -1){
+						String tempStr = new String(data, 0, readBytes);
+						Slog.i(TAG, "recv str: " + tempStr + " len is :" + readBytes);
+						String newstr = tempStr.trim();
+						Slog.i(TAG, "newstr: " + newstr);
+						String[] asplit = newstr.split("#");
+						Slog.i(TAG, "asplit[0]: " + asplit[0]);
+						//RecoverySystem.rebootWipeCache(mContext);
+						switch(Advaction.getAdvaction(asplit[0])){	
+						case systembackup:
+							Slog.i(TAG, "switch systembackup");
+							RecoverySystem.rebootSystemBackup(mContext);
+							break;
+						case wipedata:
+							Slog.i(TAG, "switch wipedata");
+							RecoverySystem.rebootWipeUserData(mContext);
+							break;
+						case wipecache:
+							Slog.i(TAG, "swtich wipecache");
+							RecoverySystem.rebootWipeCache(mContext);
+							break;
+						case install:
+							Slog.i(TAG, "switch install");
+							String file = asplit[1].trim();
+							Slog.i(TAG, "install file: " + file);
+							File recoveryFile = new File(file);
+                					if(!recoveryFile.exists()){
+								Slog.i(TAG, "install, file not exist");
+								return;
+							}
+
+                					// first verify package
+							/*
+         						try {
+                 						mWakelock.acquire();
+                 						RecoverySystem.verifyPackage(recoveryFile, recoveryVerifyListener, null);
+         						} catch (IOException e1) {
+                 						reportInstallError(OTAStateChangeListener.ERROR_PACKAGE_VERIFY_FALIED);
+                 						e1.printStackTrace();
+                 						return;
+         						} catch (GeneralSecurityException e1) {
+                 						reportInstallError(OTAStateChangeListener.ERROR_PACKAGE_VERIFY_FALIED);
+                 						e1.printStackTrace();
+                 						return;
+         						} finally {
+                 						mWakelock.release();
+         						}
+							*/
+							RecoverySystem.installPackage(mContext, recoveryFile);
+							break;
+						case appinstall:
+							Slog.i(TAG, "switch appinstall");
+                                                        String strfile = asplit[1].trim();
+                                                        String newVersionName, newpackageName;
+                                                        String oldVersionName = null;
+							int  newVersionCode = 0, oldVersionCode = 0;
+						    	int isinstall = 0;	
+							//get apk info 
+							PackageInfo info = mPackageManager.getPackageArchiveInfo(strfile, PackageManager.GET_ACTIVITIES);
+							if(info != null){
+								ApplicationInfo appInfo = info.applicationInfo;
+								newpackageName = appInfo.packageName;
+								newVersionName = info.versionName;
+								newVersionCode = info.versionCode;
+								Slog.i(TAG, "ApkName: "+newpackageName+"; versionName: "+newVersionName+"; versionCode: "+Integer.toString(newVersionCode));	
+								
+								//get installed package info
+                                                        	List<PackageInfo> packages = mPackageManager.getInstalledPackages(0);
+                                                       	 	for(int i=0;i<packages.size();i++) {
+                                                                	PackageInfo packageInfo = packages.get(i);
+                                                               	 	AppInfo tmpInfo =new AppInfo();
+                                                                	tmpInfo.appName = packageInfo.applicationInfo.loadLabel(mPackageManager).toString();
+                                                                	tmpInfo.packageName = packageInfo.packageName;
+                                                                	tmpInfo.versionName = packageInfo.versionName;
+                                                                	tmpInfo.versionCode = packageInfo.versionCode;
+                                                                	Slog.i(TAG, "Name: "+tmpInfo.packageName+"; versionName: "+tmpInfo.versionName+"; versionCode: "+Integer.toString(tmpInfo.versionCode));
+                                                        		if(tmpInfo.packageName.equals(newpackageName)){
+										oldVersionName = tmpInfo.versionName;
+										oldVersionCode = tmpInfo.versionCode;
+										break;
+									}
+								}
+                                                        	//get installed package info end
+								if(oldVersionName == null){
+									Slog.i(TAG, "get installed apk info failed, this apk may not installed before");
+									isinstall = 1;
+								}
+							}
+							else{
+								Slog.i(TAG, "getPackageArchiveInfo failed, may be invalid apk file");
+								return;
+							}
+							//get apk info end
+						
+							Slog.i(TAG, "install apk name: " + strfile);
+							File apkfile = new File(strfile);
+							if(isinstall == 1 || newVersionCode >= oldVersionCode){
+								//truely need install the apk
+								Slog.i(TAG, "now begin install the apk "+strfile);
+								mPackageManager.installPackage(Uri.fromFile(apkfile), null, PackageManager.INSTALL_REPLACE_EXISTING, null);
+							}
+							break;
+						default:
+							Slog.i(TAG, "error paramer");
+							break;		
+						}
+						/*					
+						Intent intent = new Intent();
+                				intent.setAction(TEST_ACTION);
+                				intent.putExtra("test-info", tempStr);
+                				mContext.sendBroadcastAsUser(intent, UserHandle.ALL);
+						*/
+					}
+					else
+						Slog.i(TAG, "recv error");
+					Slog.i(TAG, "finished");
+					return;
+				}
+			}catch (IOException e){
+				e.printStackTrace();	
+			}
+			
+		}
+	};
+	t.start();
+    }
+	
+}
Index: frameworks/base/services/java/com/android/server/SystemServer.java
===================================================================
--- frameworks/base/services/java/com/android/server/SystemServer.java	(revision 73)
+++ frameworks/base/services/java/com/android/server/SystemServer.java	(working copy)
@@ -711,7 +711,16 @@
                 reportWtf("starting DiskStats Service", e);
             }
 
+	    //jinxin added to support ota service
             try {
+                Slog.i(TAG, "AdvOta Service");
+                ServiceManager.addService("advota", new AdvOtaService(context));
+            } catch (Throwable e) {
+                reportWtf("starting AdvOta Service", e);
+            }
+	    //
+
+            try {
                 // need to add this service even if SamplingProfilerIntegration.isEnabled()
                 // is false, because it is this service that detects system property change and
                 // turns on SamplingProfilerIntegration. Plus, when sampling profiler doesn't work,
